@mixin pseudo($clr, $key, $i) {
  &-hover {
    &:hover {
      color: $clr;
    }
  }

  &-active {
    &:active {
      color: $clr;
    }
  }

  &-focus {
    &:focus {
      color: $clr;
    }
  }

  &-checked {
    &:checked {
      color: $clr;
    }
  }

  &-disabled {
    &:disabled {
      color: $clr;
    }
  }
}

@mixin colorsBase($colorArray) {
  @each $key, $value in $colorArray {
    .text-#{$key} {
      color: $value;
      @include pseudo($value);
    }

    .bg-#{$key} {
      background-color: $value;
      @include pseudo($value);
    }
  }
}

@mixin colorsLightDark($colorArray, $intFrom, $intTo) {
  @each $key, $value in $colorArray {
    @if($key !="black" and $key !="white" and $value !=black and $value !=white) {
      @for $i from $intFrom through $intTo {

        /* light #{$key} text #{$i} */
        .text-light-#{$key}-#{$i} {
          color: mix(white, $value, $i * 10%);
          @include pseudo(mix(white, $value, $i * 10%));
        }

        /* light #{$key} bg #{$i} */
        .bg-light-#{$key}-#{$i} {
          background-color: mix(white, $value, $i * 10%);
          @include pseudo(mix(white, $value, $i * 10%));
        }

        /* dark #{$key} text #{$i} */
        .text-dark-#{$key}-#{$i} {
          color: mix(black, $value, $i * 10%);
          @include pseudo(mix(black, $value, $i * 10%));
        }

        /* dark #{$key} bg #{$i} */
        .bg-dark-#{$key}-#{$i} {
          background-color: mix(black, $value, $i * 10%);
          @include pseudo(mix(black, $value, $i * 10%));
        }
      }
    }
  }
}